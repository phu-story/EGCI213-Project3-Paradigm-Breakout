package pins_pong_3;

import java.awt.*;

class Ball
{
    private int x, y, cx, cy, speed, size;
    private final Color color;
    static final int MAX_SPEED = 7;
    
    public Ball(int x, int y, int cx, int cy, int speed, Color color, int size) {
        this.x = x;
        this.y = y;
        this.cx = cx;
        this.cy = cy;
        this.speed = speed;
        this.color = color;
        this.size = size;
    }

    public Ball(Ball b) {
        this.x = b.x;
        this.y = b.y;
        this.cx = b.cx;
        this.cy = b.cy;
        this.speed = b.speed;
        this.color = b.color;
        this.size = b.size;
    }
    
    public void paint(Graphics g)
    {
        g.setColor(color);
        
        g.fillOval(x, y, size, size);
    }

    public void moveBall()
    {
        x += cx;
        y += cy;
    }
    
    public void bounceOffEdge(int top, int bottom)
    {
        /**
        * @param top - the y value of the top of the screen
        * @param bottom - the y value of the bottom of the screen
        */

        if(y > bottom-size - 30)
        {
            reverseY();
        }
        else if(y < top + 5)
        {
            reverseY();
        }

        /*if(x < 0)
        {
            reverseX();
        }
        else if(x > 640-size - 10)   //code to cage the ball. but since getting off x bound
        {                            //will result in opp's getting more score, ts is no important no more
            reverseX();
        }
        */ 
    }
    
    public void reverseX()
    {
        cx *= -1;
    }

    public void reverseY()
    {
        cy *= -1;
    }

    public int getY()               { return y; }
    public int getX()               { return x; }
    public int getSize()            { return size; }
    public void setX(int x)         { this.x = x; }
    public void setY(int y)         { this.y = y; }
    public void setCx(int cx)       { this.cx = cx; }
    public void setCy(int cy)       { this.cy = cy; }
    public void setSpeed(int speed) { this.speed = speed; }
    
    public void increaseSpeed()
    {
        if(speed<MAX_SPEED)
        {
            speed++;

            cx = (cx/Math.abs(cx) * speed);
            cy = (cy/Math.abs(cy) * speed);
        }
    }

}package pins_pong_3;

import javax.swing.JPanel;
import java.awt.event.*;
import java.awt.*;

class GameMode extends JPanel implements MouseMotionListener, KeyListener
{
    private int cx=1, cy=1, ballSpeed=1; //to make it harder, increase all THREE variables
    private int userPaddleSpeed=2;
    private int pcPaddleSpeed=1;
    private int refreshRate = Main.DELAY; //want to change this? change main's delay
    private Color pcPaddleColor=Color.RED, userPaddleColor=Color.BLUE, ballColor=Color.YELLOW;
    protected boolean pcAccidentalMiss;
    private int oscillationFrequency = 10;
    private int userPaddleHeight=75;
    private int pcPaddleHeight=75;
    private int intUserLoc=200;
    private int intPcLoc=200;
    
    private boolean dynamicBallSpeed=true;
    private boolean betterAi=true;
    private boolean oscillation = true;
    private boolean acMissMode=true;
    private boolean multiplayer=false;
    private boolean disableMouse=false;

    public int getCx() { return cx; }
    public int getCy() { return cy; }
    public int getBallSpeed() { return ballSpeed; }
    public int getUserPaddleSpeed() { return userPaddleSpeed; }
    public int getPcPaddleSpeed() { return pcPaddleSpeed; }
    public int getRefreshRate() { return refreshRate; }
    public Color getPcPaddleColor() { return pcPaddleColor; }
    public Color getUserPaddleColor() { return userPaddleColor; }
    public Color getBallColor() { return ballColor; }
    public int getOscillationFrequency() { return oscillationFrequency; }
    public int getUserPaddleHeight() { return userPaddleHeight; }
    public int getPcPaddleHeight() { return pcPaddleHeight; }
    public boolean getDynamicBallSpeed() { return dynamicBallSpeed; }
    public boolean getBetterAi() { return betterAi; }
    public boolean getOscillation() { return oscillation; }
    public boolean getAcMissMode() { return acMissMode; }
    public boolean getMultiplayer() { return multiplayer; }
    public boolean getDisableMouse() { return disableMouse;}
    public int getIntUserLoc(){ return intUserLoc;}
    public int getIntPcLoc(){ return intPcLoc;}
    
    // Compact setter methods
    public void setCx(int cx) { this.cx = cx; }
    public void setCy(int cy) { this.cy = cy; }
    public void setBallSpeed(int ballSpeed) { this.ballSpeed = ballSpeed; }
    public void setUserPaddleSpeed(int userPaddleSpeed) { this.userPaddleSpeed = userPaddleSpeed; }
    public void setPcPaddleSpeed(int pcPaddleSpeed) { this.pcPaddleSpeed = pcPaddleSpeed; }
    public void setRefreshRate(int refreshRate) { this.refreshRate = refreshRate; }
    public void setPcPaddleColor(Color pcPaddleColor) { this.pcPaddleColor = pcPaddleColor; }
    public void setUserPaddleColor(Color userPaddleColor) { this.userPaddleColor = userPaddleColor; }
    public void setBallColor(Color ballColor) { this.ballColor = ballColor; }
    public void setOscillationFrequency(int oscillationFrequency) { this.oscillationFrequency = oscillationFrequency; }
    public void setUserPaddleColor(int userPaddleHeight) { this.userPaddleHeight = userPaddleHeight; }
    public void setUserPaddleHeight(int userPaddleHeight) { this.userPaddleHeight = userPaddleHeight; }
    public void setPcPaddleHeight(int pcPaddleHeight) { this.pcPaddleHeight = pcPaddleHeight; }
    public void setDynamicBallSpeed(boolean dynamicBallSpeed) { this.dynamicBallSpeed = dynamicBallSpeed; }
    public void setBetterAi(boolean betterAi) { this.betterAi = betterAi; }
    public void setOscillation(boolean oscillation) { this.oscillation = oscillation; }
    public void setAcMissMode(boolean acMissMode) { this.acMissMode = acMissMode; }
    public void setMultiplayer(boolean multiplayer) { this.multiplayer = multiplayer; }
    public void setDisableMouse(boolean disableMouse) {this.disableMouse = disableMouse; }
    public void setIntUserLoc(int intUserLoc) {this.intUserLoc = intUserLoc; }
     public void setIntPcLoc(int intPcLoc) {this.intPcLoc = intPcLoc; }

    

    public GameMode()
    {
       
        
    }
    
   public void singleFastBall()
   {
        setCx(10);
        setCy(10);
        setBallSpeed(10);
        setPcPaddleSpeed(10);
        setOscillation(false);
        setUserPaddleSpeed(10);
        setAcMissMode(false);
   }

   

   public void gameModeSetter()
   {
        setDynamicBallSpeed(true); 
        setBetterAi(true); //multiplayer disables this
        setOscillation(true); //multiplayer disables this
        setAcMissMode(true); //multiplayer disables this
        //setMultiplayer(true);
        //setPcPaddleHeight(3000);
        setDisableMouse(true); //multiplayer disables this
        
        setCx(4);
        setCy(4);
        setBallSpeed(4);
        
        setPcPaddleSpeed(4);
        setUserPaddleSpeed(4);
        setOscillation(false); //multiplayer disables this
        //setUserPaddleHeight(3000);
        setIntUserLoc(200);
   }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        
    }
}package pins_pong_3;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


class Main extends JFrame
{
    static JFrame f = new JFrame("Pong");
    public static int DELAY = 10; //this is the frequency of how much a frame would be updated, 
                                         //not just FPS but also the speed of a game

    public static void main(String[] args)
    {
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        f.setSize(650, 495);

        PongGame game = new PongGame();
        game.gameModeSetter();
        
        game.intGame();
        f.add(game);
        
       
        f.setVisible(true);
        
        //timer works as a frame updater, everytime it runs, in this case, every 33 milisecs
        //game will call repaint
        Timer timer = new Timer(DELAY, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {

                        game.gameLogic();
                        game.repaint();
                    }
                });

           
           timer.start();

    }
}package pins_pong_3;

import java.awt.*;

class Paddle
{
     private int height, x, y, speed;
    private Color color;

    //constant
    static final int PADDLE_WIDTH = 15;

    /**
     * A paddle is just a ping pong bat
     * @param x x cord of starting position of a paddle
     * @param y y cord of starting position of a paddle
     * @param height the paddle height
     * @param speed the amount the paddle may move per frame   CAN CHANGE LATER
     * @param color the paddle color
     */
    public Paddle(int x, int y, int height, int speed, Color color) {
        this.x = x;
        this.y = y;
        this.height = height;
        this.speed = speed;
        this.color = color;
    }

    public int getHeight() { return height; }
    public int getY() { return y; }
    public int getX() { return x; }
    public int getCenterY() { return y + height/2; }


    public void paint(Graphics g)
    {
        g.setColor(color);
        g.fillRect(x, y, PADDLE_WIDTH, height);
    }
    
    /**
    * Move the paddle towards this y position every frame (centered)
    * @param moveToY - position the paddle is centered on
    */

    public void moveToward(int moveToY)
    {
        /**
        * Move the paddle towards this y position every frame (centered)
        * @param moveToY - position the paddle is centered on
        */

        //find the location of the center of the paddle
        //@param centerY is also a "relative" center of the paddle, based on current y
         int centerY = y + height / 2;

        if (Math.abs(centerY - moveToY) > speed)
        {
            if (centerY > moveToY)
            {
                y -= speed;
                if (y < 0)
                    y = 0;
            }
            else if (centerY < moveToY)
            {
                y += speed;
                if (y > PongGame.WINDOW_HEIGHT - height)
                    y = PongGame.WINDOW_HEIGHT - height;
            }
        }
    }

    /**
    *
    * @param b the ball we're checking for a collision with
    * @return true if collision is detected
    */
    public boolean checkCollision(Ball b)
    {
        int rightX = x + PADDLE_WIDTH;
        int bottomY = y + height;

        if( ( b.getX() + b.getSize() ) > x && b.getX() < rightX ) //check if ball is between the paddle (x cord)
        {
            if( ( b.getY() + b.getSize() ) > y && b.getY() < bottomY) //check if ball is between the paddle (y cord)
            {
                return true;
            }
        }
        
        return false; //nah, they aint be hitting bro (insert emoji cry)

    }

    

}package pins_pong_3;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


class PongGame extends GameMode
{
    static final int WINDOW_WIDTH = 640, WINDOW_HEIGHT = 480;
    private Ball gameBall, futureBall; /**TRON LEGACY TYPE SHIT, nah, in order to make pc paddle smarter
                                        * we can make an invisible ball that foresees normal ball action and have 
                                        * pc paddle responds to that ball instead
                                        */
    private Paddle userPaddle, pcPaddle;
    private int userMouseY, pcMouseY;

    //customizable attribute
    /*
     * little explanation here, getCx() cy and speed should be the same at first
     * getCx() and cy is how much a ball moves in one unit of time, or basically every one frame updated
     * which is about 33 miliseconds (check in main), the "speed" variable is only useful
     * in increaseSpeed() method, aside from that, it has no use, for now
     */
    
    /*private static int getCx()=1, cy=1, ballSpeed=1; //to make it harder, increase all THREE variables
    static int userPaddleSpeed=3;
    static int pcPaddleSpeed=1;
    private final int refreshRate = Main.DELAY; //want to change this? change main's delay
    private final Color pcPaddleColor=Color.RED, userPaddleColor=Color.BLUE, ballColor=Color.YELLOW;
    private boolean pcAccidentalMiss;
    private final int oscillationFrequency = 10;*/

    

    private int userScore, pcScore, bounceCount, intUserLoc2, intPcLoc2;
    private int detectedCollideY;
    private boolean pcGotToTarget;
    private int oscillateTowards;

    private Timer paddleKeyTimer;
    private boolean upKeyPressed=false, downKeyPressed=false;
    private boolean wPressed=false, sPressed=false;
    
    

    public PongGame()
    {
        super();

        userMouseY = getIntUserLoc()+getUserPaddleHeight()/2;
        pcMouseY=getIntPcLoc()+getPcPaddleHeight()/2;
        
        
        userScore =0; pcScore =0;
        bounceCount=0;

        detectedCollideY=-1;
        pcGotToTarget=false;
        oscillateTowards=0;
        pcAccidentalMiss=false;

        setFocusable(true);
        requestFocusInWindow();

        addMouseMotionListener(this);
        addKeyListener(this);

        paddleKeyTimer = new Timer(getRefreshRate(), e-> {

            if(!getMultiplayer())
            {
                if(upKeyPressed && userPaddle.getY() > 0)
                {
                    userMouseY-=getUserPaddleSpeed();
                    //System.out.println("key is supposed to be moving 01");
                }
                if(downKeyPressed && userPaddle.getY() < WINDOW_HEIGHT - userPaddle.getHeight() - 23)
                {
                    userMouseY+=getUserPaddleSpeed();
                    //System.out.println("key is supposed to be moving 02");
                }
            }
            else
            {
                if (upKeyPressed && pcPaddle.getY() > 0) {
                    pcMouseY -= getPcPaddleSpeed();
                    // System.out.println("key is supposed to be moving 01");
                }
                if (wPressed && userPaddle.getY() > 0) {
                    userMouseY -= getUserPaddleSpeed();
                    // System.out.println("key is supposed to be moving 03");
                }

                // Handle DOWN or S key press
                if (downKeyPressed && pcPaddle.getY() < WINDOW_HEIGHT - pcPaddle.getHeight() - 23) {
                    pcMouseY += getUserPaddleSpeed();
                    // System.out.println("key is supposed to be moving 02");
                }
                if (sPressed && userPaddle.getY() < WINDOW_HEIGHT - userPaddle.getHeight() - 23) {
                    userMouseY += getUserPaddleSpeed();
                    // System.out.println("key is supposed to be moving 04");
    }
            }

        });
    }
    
    public void intGame()
    {
        gameBall = new Ball(300, 200 , getCx() ,getCy() , getBallSpeed() , getBallColor(), 10); //SPEED IS 3
        futureBall = new Ball(gameBall);
        userPaddle = new Paddle(10, getIntUserLoc(), getUserPaddleHeight(), getUserPaddleSpeed(), getUserPaddleColor()); //SPEED CAN CHANGE HERE, COLOR AS WELL
        pcPaddle = new Paddle(610, getIntPcLoc(), getPcPaddleHeight(), getPcPaddleSpeed(), getPcPaddleColor());
    }

    @Override
    public void paintComponent(Graphics g)
    {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        
        gameBall.paint(g);
        //futureBall.paint(g); //supposed to be invisible, added paint to make dev sees if mechanic works or not
        
        userPaddle.paint(g);
        pcPaddle.paint(g);

        g.setColor(Color.WHITE); //SCORE BOARD CAN ALSO BE CUSTOMIZED HERE
        String scoreBoard = "Score - user [ " + userScore + " ] PC [ " + pcScore + " ]"; 
        g.drawString(scoreBoard, 250, 20);
             
    }

    public void gameLogic()
    {
        gameBall.moveBall();
        gameBall.bounceOffEdge(0, WINDOW_HEIGHT);
        
        if(!getMultiplayer()){
            if(detectedCollideY == -1 && getBetterAi())
            {
                for(int i=0; i<10; i++)
                {
                    futureBall.moveBall();
                    //System.out.println("future moves ball"); //for debugging purpose
                    futureBall.bounceOffEdge(0, WINDOW_HEIGHT);

                    if(futureBall.getX() < userPaddle.getX() + Paddle.PADDLE_WIDTH)
                    {
                        futureBall.reverseX();
                    }

                    if(futureBall.getX() > pcPaddle.getX())
                    {
                        detectedCollideY = futureBall.getY();
                        //check whether it actually works or not
                        System.out.println("Future collision at : " + detectedCollideY);
                        if(pcAccidentalMiss && getAcMissMode())
                        {
                            detectedCollideY+=75;
                        }

                        break;
                    }
                }
            }

            userPaddle.moveToward(userMouseY);
            //pcPaddle.moveToward(gameBall.getY()); //EASIEST IMPLEMENTATION, PCPADDLE ALWAYS MOVES TOWARD THE BALL
            //IMPLEMENTED ALREADY
            //We can make it harder though
            
            if( Math.abs( ( pcPaddle.getY() + pcPaddle.getHeight()/2 ) - detectedCollideY) < 3 && !pcGotToTarget)
            {
                pcGotToTarget = true;
                System.out.println("pc paddle got to designated target"); //for better ai movement

            }
            
            if(!pcGotToTarget){
                if(getBetterAi()){
                    pcPaddle.moveToward(detectedCollideY); //advance pc detection, for sees where the ball is going, HARDER GAME MODE
                }
                else
                {
                    pcPaddle.moveToward(gameBall.getY());
                }
                
            }
            else if(getOscillation())
            {
                if(pcPaddle.getCenterY() > detectedCollideY + getOscillationFrequency())
                {
                    oscillateTowards = 0;
                }
                else if(pcPaddle.getCenterY() < detectedCollideY - getOscillationFrequency())
                {
                    oscillateTowards = WINDOW_HEIGHT;
                }

                pcPaddle.moveToward(oscillateTowards);
            }
            else
            {

            }

            if(userPaddle.checkCollision(gameBall))
            {
                gameBall.reverseX();
                gameBall.setX(userPaddle.getX() + Paddle.PADDLE_WIDTH + 1);
                if(getDynamicBallSpeed()){
                    bounceCount++;
                }
            }
            
            if(pcPaddle.checkCollision(gameBall))
            {
                gameBall.reverseX();
                gameBall.setX(pcPaddle.getX() - 10); // make it so that some part of the ball still stuck inside the paddle
                                                    //make it more.. collision realistic?
                futureBall = new Ball(gameBall);                         //REMOVE TS PART FOR SIMPLER AI
                //reset the detected collision point
                detectedCollideY = -1; 
                pcGotToTarget = false;                                  //TO THIS
                bounceCount ++;

                if((int)(Math.random() * 3) == 0)
                {
                    pcAccidentalMiss = true; //PC ACCIDENTAL MISS
                    System.out.println("pc should miss next bounce");
                }
            }
            if(getDynamicBallSpeed())
            {
                if(bounceCount == 5) //DYNAMIC BALL SPEED CHANGE HERE
                {
                    bounceCount=0;
                    gameBall.increaseSpeed();
                }
            }
        }
        else
        {
            pcPaddle.moveToward(pcMouseY);
            userPaddle.moveToward(userMouseY);

            if(userPaddle.checkCollision(gameBall))
            {
                gameBall.reverseX();
                gameBall.setX(userPaddle.getX() + Paddle.PADDLE_WIDTH + 1);
                bounceCount++;
                
            }
            
            if(pcPaddle.checkCollision(gameBall))
            {
                gameBall.reverseX();
                gameBall.setX(pcPaddle.getX() - 10); // make it so that some part of the ball still stuck inside the paddle
                                                    //make it more.. collision realistic?
                                                //TO THIS
                bounceCount ++;
            }
            if(getDynamicBallSpeed())
            {
                if(bounceCount == 5) //DYNAMIC BALL SPEED CHANGE HERE
                {
                    bounceCount=0;
                    gameBall.increaseSpeed();
                }
            }
        }

        outXBound(gameBall); //belong to this class, if ball gets out of bound, then someone loses


    }

    @Override
    public void mouseDragged(MouseEvent e) {

    }

    @Override
    public void mouseMoved(MouseEvent e) {

        if(!getMultiplayer() && !getDisableMouse()){
            userMouseY = e.getY();
        }
    }

    public void reset()
    {
        try
        {
            Thread.sleep(1000);
        }
        catch(Exception e)
        {   
            e.printStackTrace();
        }

        gameBall = new Ball(300, 200 , getCx() ,getCy() , getBallSpeed() , getBallColor(), 10); //SPEED IS 3
        futureBall = new Ball(gameBall);
        userPaddle = new Paddle(10, getIntUserLoc(), getUserPaddleHeight(), getUserPaddleSpeed(), getUserPaddleColor()); //SPEED CAN CHANGE HERE, COLOR AS WELL
        pcPaddle = new Paddle(610, getIntPcLoc(), getPcPaddleHeight(), getPcPaddleSpeed(), getPcPaddleColor());

        //reset futureBall
        bounceCount =0;
        detectedCollideY = -1;
        pcGotToTarget = false; //might be useful in future
        pcAccidentalMiss=false;
        userMouseY=getIntUserLoc()+getUserPaddleHeight()/2;
        pcMouseY=getIntPcLoc()+getPcPaddleHeight()/2;
        upKeyPressed = false;
        downKeyPressed = false;
        wPressed = false;
        sPressed = false;
        paddleKeyTimer.stop();
    
    }

    public void outXBound(Ball gameBall)
    {
        if(gameBall.getX() < 0) //condition checking whether lose or not
        {
            pcScore++;
            reset();
        }
        else if(gameBall.getX() > WINDOW_WIDTH)
        {
            userScore++;
            reset();
        }
    }

     @Override
    public void keyPressed(KeyEvent e) {
        int keycode = e.getKeyCode();

        if(!getMultiplayer())
        {
            if (keycode == KeyEvent.VK_UP || keycode == KeyEvent.VK_W) {
                if (!upKeyPressed) {
                    upKeyPressed = true;
                    //System.out.println("key is supposed to be moving 03");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                        
                    }
                }
            }

            if (keycode == KeyEvent.VK_DOWN || keycode == KeyEvent.VK_S) {
                if (!downKeyPressed) {
                    downKeyPressed = true;
                    //System.out.println("key is supposed to be moving 04");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                    }
                }
            }
        }
        else
        {
            if (keycode == KeyEvent.VK_UP) {
                if (!upKeyPressed) {
                    upKeyPressed = true;
                    //System.out.println("key is supposed to be moving 03");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                        
                    }
                }
            }
            if (keycode == KeyEvent.VK_W) {
                if (!wPressed) {
                    wPressed = true;
                    //System.out.println("key is supposed to be moving 03");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                        
                    }
                }
            }

            if (keycode == KeyEvent.VK_DOWN) {
                if (!downKeyPressed) {
                    downKeyPressed = true;
                    //System.out.println("key is supposed to be moving 04");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                    }
                }
            }

            if (keycode == KeyEvent.VK_S) {
                if (!sPressed) {
                    sPressed = true;
                    //System.out.println("key is supposed to be moving 03");
                    if (!paddleKeyTimer.isRunning()) {
                        paddleKeyTimer.start(); // Start the timer only once
                        
                    }
                }
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
         int keyCode = e.getKeyCode();
        
        if(!getMultiplayer())
        {
            if (keyCode == KeyEvent.VK_UP  || keyCode == KeyEvent.VK_W ) {
                upKeyPressed = false;  // Stop printing when UP key is released
                //System.out.println("key is supposed to be moving 05");
                //classical debug technique
            }

            if (keyCode == KeyEvent.VK_DOWN  || keyCode == KeyEvent.VK_S) {
                downKeyPressed = false;  // Stop printing when DOWN key is released
                //System.out.println("key is supposed to be moving 06");
            }

            // Stop the timer when no keys are pressed
            if (!upKeyPressed && !downKeyPressed) {
                paddleKeyTimer.stop();
            }
        }
        else
        {
            if (keyCode == KeyEvent.VK_UP) {
                upKeyPressed = false;
            }

            if (keyCode == KeyEvent.VK_W) {
                wPressed = false;
            }

            if (keyCode == KeyEvent.VK_DOWN) {
                downKeyPressed = false;
            }

            if (keyCode == KeyEvent.VK_S) {
                sPressed = false;
            }

            if (!upKeyPressed && !downKeyPressed && !wPressed && !sPressed) {
                paddleKeyTimer.stop();
            }

        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        // Optionally handle key typed events if needed
    }

    


}



